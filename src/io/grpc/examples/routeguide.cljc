;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; Message Implementation of package io.grpc.examples.routeguide
;;;----------------------------------------------------------------------------------
(ns io.grpc.examples.routeguide
  (:require [protojure.protobuf.protocol :as pb]
            [protojure.protobuf.serdes.core :as serdes.core]
            [protojure.protobuf.serdes.complex :as serdes.complex]
            [protojure.protobuf.serdes.utils :refer [tag-map]]
            [protojure.protobuf.serdes.stream :as serdes.stream]
            [clojure.set :as set]
            [clojure.spec.alpha :as s]))

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Forward declarations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

(declare cis->Point)
(declare ecis->Point)
(declare new-Point)
(declare cis->Rectangle)
(declare ecis->Rectangle)
(declare new-Rectangle)
(declare cis->Feature)
(declare ecis->Feature)
(declare new-Feature)
(declare cis->RouteNote)
(declare ecis->RouteNote)
(declare new-RouteNote)
(declare cis->RouteSummary)
(declare ecis->RouteSummary)
(declare new-RouteSummary)


;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Message Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; Point
;-----------------------------------------------------------------------------
(defrecord Point-record [latitude longitude]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Int32 1  {:optimize true} (:latitude this) os)
    (serdes.core/write-Int32 2  {:optimize true} (:longitude this) os))
  pb/TypeReflection
  (gettype [this]
    "io.grpc.examples.routeguide.Point"))

(s/def :io.grpc.examples.routeguide.Point/latitude int?)
(s/def :io.grpc.examples.routeguide.Point/longitude int?)
(s/def ::Point-spec (s/keys :opt-un [:io.grpc.examples.routeguide.Point/latitude :io.grpc.examples.routeguide.Point/longitude ]))
(def Point-defaults {:latitude 0 :longitude 0 })

(defn cis->Point
  "CodedInputStream to Point"
  [is]
  (->> (tag-map Point-defaults
         (fn [tag index]
             (case index
               1 [:latitude (serdes.core/cis->Int32 is)]
               2 [:longitude (serdes.core/cis->Int32 is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Point-record)))

(defn ecis->Point
  "Embedded CodedInputStream to Point"
  [is]
  (serdes.core/cis->embedded cis->Point is))

(defn new-Point
  "Creates a new instance from a map, similar to map->Point except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Point-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Point-spec init))))]}
  (-> (merge Point-defaults init)
      (map->Point-record)))

(defn pb->Point
  "Protobuf to Point"
  [input]
  (cis->Point (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Point-meta {:type "io.grpc.examples.routeguide.Point" :decoder pb->Point})

;-----------------------------------------------------------------------------
; Rectangle
;-----------------------------------------------------------------------------
(defrecord Rectangle-record [lo hi]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-embedded 1 (:lo this) os)
    (serdes.core/write-embedded 2 (:hi this) os))
  pb/TypeReflection
  (gettype [this]
    "io.grpc.examples.routeguide.Rectangle"))

(s/def ::Rectangle-spec (s/keys :opt-un []))
(def Rectangle-defaults {})

(defn cis->Rectangle
  "CodedInputStream to Rectangle"
  [is]
  (->> (tag-map Rectangle-defaults
         (fn [tag index]
             (case index
               1 [:lo (ecis->Point is)]
               2 [:hi (ecis->Point is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Rectangle-record)))

(defn ecis->Rectangle
  "Embedded CodedInputStream to Rectangle"
  [is]
  (serdes.core/cis->embedded cis->Rectangle is))

(defn new-Rectangle
  "Creates a new instance from a map, similar to map->Rectangle except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Rectangle-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Rectangle-spec init))))]}
  (-> (merge Rectangle-defaults init)
      (cond-> (some? (get init :lo)) (update :lo new-Point))
      (cond-> (some? (get init :hi)) (update :hi new-Point))
      (map->Rectangle-record)))

(defn pb->Rectangle
  "Protobuf to Rectangle"
  [input]
  (cis->Rectangle (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Rectangle-meta {:type "io.grpc.examples.routeguide.Rectangle" :decoder pb->Rectangle})

;-----------------------------------------------------------------------------
; Feature
;-----------------------------------------------------------------------------
(defrecord Feature-record [name location]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:name this) os)
    (serdes.core/write-embedded 2 (:location this) os))
  pb/TypeReflection
  (gettype [this]
    "io.grpc.examples.routeguide.Feature"))

(s/def :io.grpc.examples.routeguide.Feature/name string?)

(s/def ::Feature-spec (s/keys :opt-un [:io.grpc.examples.routeguide.Feature/name ]))
(def Feature-defaults {:name "" })

(defn cis->Feature
  "CodedInputStream to Feature"
  [is]
  (->> (tag-map Feature-defaults
         (fn [tag index]
             (case index
               1 [:name (serdes.core/cis->String is)]
               2 [:location (ecis->Point is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Feature-record)))

(defn ecis->Feature
  "Embedded CodedInputStream to Feature"
  [is]
  (serdes.core/cis->embedded cis->Feature is))

(defn new-Feature
  "Creates a new instance from a map, similar to map->Feature except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Feature-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Feature-spec init))))]}
  (-> (merge Feature-defaults init)
      (cond-> (some? (get init :location)) (update :location new-Point))
      (map->Feature-record)))

(defn pb->Feature
  "Protobuf to Feature"
  [input]
  (cis->Feature (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Feature-meta {:type "io.grpc.examples.routeguide.Feature" :decoder pb->Feature})

;-----------------------------------------------------------------------------
; RouteNote
;-----------------------------------------------------------------------------
(defrecord RouteNote-record [location message]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-embedded 1 (:location this) os)
    (serdes.core/write-String 2  {:optimize true} (:message this) os))
  pb/TypeReflection
  (gettype [this]
    "io.grpc.examples.routeguide.RouteNote"))

(s/def :io.grpc.examples.routeguide.RouteNote/message string?)
(s/def ::RouteNote-spec (s/keys :opt-un [:io.grpc.examples.routeguide.RouteNote/message ]))
(def RouteNote-defaults {:message "" })

(defn cis->RouteNote
  "CodedInputStream to RouteNote"
  [is]
  (->> (tag-map RouteNote-defaults
         (fn [tag index]
             (case index
               1 [:location (ecis->Point is)]
               2 [:message (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->RouteNote-record)))

(defn ecis->RouteNote
  "Embedded CodedInputStream to RouteNote"
  [is]
  (serdes.core/cis->embedded cis->RouteNote is))

(defn new-RouteNote
  "Creates a new instance from a map, similar to map->RouteNote except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::RouteNote-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::RouteNote-spec init))))]}
  (-> (merge RouteNote-defaults init)
      (cond-> (some? (get init :location)) (update :location new-Point))
      (map->RouteNote-record)))

(defn pb->RouteNote
  "Protobuf to RouteNote"
  [input]
  (cis->RouteNote (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record RouteNote-meta {:type "io.grpc.examples.routeguide.RouteNote" :decoder pb->RouteNote})

;-----------------------------------------------------------------------------
; RouteSummary
;-----------------------------------------------------------------------------
(defrecord RouteSummary-record [point-count feature-count distance elapsed-time]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Int32 1  {:optimize true} (:point-count this) os)
    (serdes.core/write-Int32 2  {:optimize true} (:feature-count this) os)
    (serdes.core/write-Int32 3  {:optimize true} (:distance this) os)
    (serdes.core/write-Int32 4  {:optimize true} (:elapsed-time this) os))
  pb/TypeReflection
  (gettype [this]
    "io.grpc.examples.routeguide.RouteSummary"))

(s/def :io.grpc.examples.routeguide.RouteSummary/point-count int?)
(s/def :io.grpc.examples.routeguide.RouteSummary/feature-count int?)
(s/def :io.grpc.examples.routeguide.RouteSummary/distance int?)
(s/def :io.grpc.examples.routeguide.RouteSummary/elapsed-time int?)
(s/def ::RouteSummary-spec (s/keys :opt-un [:io.grpc.examples.routeguide.RouteSummary/point-count :io.grpc.examples.routeguide.RouteSummary/feature-count :io.grpc.examples.routeguide.RouteSummary/distance :io.grpc.examples.routeguide.RouteSummary/elapsed-time ]))
(def RouteSummary-defaults {:point-count 0 :feature-count 0 :distance 0 :elapsed-time 0 })

(defn cis->RouteSummary
  "CodedInputStream to RouteSummary"
  [is]
  (->> (tag-map RouteSummary-defaults
         (fn [tag index]
             (case index
               1 [:point-count (serdes.core/cis->Int32 is)]
               2 [:feature-count (serdes.core/cis->Int32 is)]
               3 [:distance (serdes.core/cis->Int32 is)]
               4 [:elapsed-time (serdes.core/cis->Int32 is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->RouteSummary-record)))

(defn ecis->RouteSummary
  "Embedded CodedInputStream to RouteSummary"
  [is]
  (serdes.core/cis->embedded cis->RouteSummary is))

(defn new-RouteSummary
  "Creates a new instance from a map, similar to map->RouteSummary except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::RouteSummary-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::RouteSummary-spec init))))]}
  (-> (merge RouteSummary-defaults init)
      (map->RouteSummary-record)))

(defn pb->RouteSummary
  "Protobuf to RouteSummary"
  [input]
  (cis->RouteSummary (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record RouteSummary-meta {:type "io.grpc.examples.routeguide.RouteSummary" :decoder pb->RouteSummary})

