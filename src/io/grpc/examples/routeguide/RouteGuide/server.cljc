;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; GRPC io.grpc.examples.routeguide.RouteGuide Service Implementation
;;;----------------------------------------------------------------------------------
(ns io.grpc.examples.routeguide.RouteGuide.server
  (:require [io.grpc.examples.routeguide :refer :all]
))

;-----------------------------------------------------------------------------
; GRPC RouteGuide
;-----------------------------------------------------------------------------
(defprotocol Service
  (GetFeature [this param])
  (ListFeatures [this param])
  (RecordRoute [this param])
  (RouteChat [this param]))

(defn- GetFeature-dispatch
  [ctx request]
  (GetFeature ctx request))
(defn- ListFeatures-dispatch
  [ctx request]
  (ListFeatures ctx request))
(defn- RecordRoute-dispatch
  [ctx request]
  (RecordRoute ctx request))
(defn- RouteChat-dispatch
  [ctx request]
  (RouteChat ctx request))

(def ^:const rpc-metadata
  [{:pkg "io.grpc.examples.routeguide" :service "RouteGuide" :method "GetFeature" :method-fn GetFeature-dispatch :server-streaming false :client-streaming false :input pb->Point :output new-Feature}
   {:pkg "io.grpc.examples.routeguide" :service "RouteGuide" :method "ListFeatures" :method-fn ListFeatures-dispatch :server-streaming true :client-streaming false :input pb->Rectangle :output new-Feature}
   {:pkg "io.grpc.examples.routeguide" :service "RouteGuide" :method "RecordRoute" :method-fn RecordRoute-dispatch :server-streaming false :client-streaming true :input pb->Point :output new-RouteSummary}
   {:pkg "io.grpc.examples.routeguide" :service "RouteGuide" :method "RouteChat" :method-fn RouteChat-dispatch :server-streaming true :client-streaming true :input pb->RouteNote :output new-RouteNote}])
